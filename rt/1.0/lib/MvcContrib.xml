<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvcContrib</name>
    </assembly>
    <members>
        <member name="T:MvcContrib.UI.Pager.Pager">
            <summary>
            Renders a pager component from an IPagination datasource.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Pager.Pager.#ctor(MvcContrib.Pagination.IPagination,System.Web.HttpRequestBase)">
            <summary>
            Creates a new instance of the Pager class.
            </summary>
            <param name="pagination">The IPagination datasource</param>
            <param name="request">The current HTTP Request</param>
        </member>
        <member name="M:MvcContrib.UI.Pager.Pager.QueryParam(System.String)">
            <summary>
            Specifies the query string parameter to use when generating pager links. The default is 'page'
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Pager.Pager.SingleFormat(System.String)">
            <summary>
            Specifies the format to use when rendering a pagination containing a single page. 
            The default is 'Showing {0} of {1}' (eg 'Showing 1 of 3')
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Pager.Pager.Format(System.String)">
            <summary>
            Specifies the format to use when rendering a pagination containing multiple pages. 
            The default is 'Showing {0} - {1} of {2}' (eg 'Showing 1 to 3 of 6')
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Pager.Pager.First(System.String)">
            <summary>
            Text for the 'first' link.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Pager.Pager.Previous(System.String)">
            <summary>
            Text for the 'prev' link
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Pager.Pager.Next(System.String)">
            <summary>
            Text for the 'next' link
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Pager.Pager.Last(System.String)">
            <summary>
            Text for the 'last' link
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Pager.Pager.Link(System.Func{System.Int32,System.String})">
            <summary>
            Uses a lambda expression to generate the URL for the page links.
            </summary>
            <param name="urlBuilder">Lambda expression for generating the URL used in the page links</param>
        </member>
        <member name="T:MvcContrib.UI.MenuBuilder.OpenAuthorizeAttribute">
            <summary>
            This class opens up the AuthorizeCore method which is protected in the MVC framework. 
            If this method is made public, this entire file could be eliminated.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.GridRenderer`1">
            <summary>
            Base class for Grid Renderers. 
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.IGridRenderer`1">
            <summary>
            A renderer responsible for rendering a grid.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridRenderer`1.Render(MvcContrib.UI.Grid.IGridModel{`0},System.Collections.Generic.IEnumerable{`0},System.IO.TextWriter,System.Web.Mvc.ViewContext)">
            <summary>
            Renders a grid
            </summary>
            <param name="gridModel">The grid model to render</param>
            <param name="dataSource">Data source for the grid</param>
            <param name="output">The TextWriter to which the grid should be rendered/</param>
            <param name="viewContext">View context</param>
        </member>
        <member name="T:MvcContrib.Routing.DebugHttpHandler">
            <summary>
            HTTP Handler that outputs route debugging information.
            </summary>
        </member>
        <member name="T:MvcContrib.Filters.PredicatePreconditionFilter">
            <author>Troy DeMonbreun</author>
            <summary>
            This is an action attribute that defines (via a predicate method) a required RouteData or Request
            parameter "precondition" for the action. On precondition failure, the specified Exception type will be thrown.
            More info <see href="http://blog.troyd.net/ASPNET+MVC+Controller+Action+Precondition+Filter+V2+Now+Part+Of+MVCContrib+Project.aspx">here</see>.
            </summary>
            <example>
            <code>
            [PredicatePreconditionFilter("id", PreconditionFilter.ParamType.RouteData, "IsGreaterThanZero", typeof(ArgumentOutOfRangeException))]
            OR
            [PredicatePreconditionFilter("id", PreconditionFilter.ParamType.Request, "IsGreaterThanZero", typeof(ArgumentOutOfRangeException))]
            </code>
            </example>
        </member>
        <member name="T:MvcContrib.Filters.PreconditionFilter">
            <author>Troy DeMonbreun</author>
            <summary>
            This is an action attribute base class that defines a required RouteData or Request parameter
            "precondition" for the action. On precondition failure, the specified Exception type will be thrown.
            More info <see href="http://blog.troyd.net/ASPNET+MVC+Controller+Action+Precondition+Filter+V2+Now+Part+Of+MVCContrib+Project.aspx">here</see>.
            </summary>
        </member>
        <member name="M:MvcContrib.Filters.PredicatePreconditionFilter.#ctor(System.String,MvcContrib.Filters.PreconditionFilter.ParamType,System.String,System.Type)">
            <summary>
            Attribute constructor
            </summary>
            <param name="paramName">Name of key to validate</param>
            <param name="paramType">Type of key to validate</param>
            <param name="predicateMethod">Predicate&lt;object&gt; method that encapsulates validation logic</param>
            <param name="exceptionToThrow">Exception to throw on failed validation</param>
        </member>
        <member name="M:MvcContrib.Filters.PredicatePreconditionFilter.FailedValidation(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Signals failure if RouteData key does not exist, RouteData key value is null,
            or predicate evaluates to false
            </summary>
        </member>
        <member name="T:MvcContrib.UI.MenuBuilder.MenuItem">
            <summary>
             Used internally to create the menu, use MvcContrib.UI.MenuBuilder.Menu to create a menu.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.MenuItem.RenderHtml(System.Web.Mvc.ControllerContext,System.IO.TextWriter)">
            <summary>
            Renders the menu according to the current RequestContext to the specified TextWriter
            </summary>
            <param name="requestContext">The current RequestContext</param>
            <param name="writer">The TextWriter for output</param>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.MenuItem.RenderHtml">
            <summary>
            Used internally to render the menu. Do not call this directly without first calling Prepare, or call RenderHtml(RequestContext ...)
            </summary>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.MenuItem.Prepare(System.Web.Mvc.ControllerContext)">
            <summary>
            Called internally by RenderHtml(RequestContext, TextWriter) to remove empty items from lists and generate urls.
            Can also be called externally to prepare the menu for serialization into Json/Xml
            </summary>
            <param name="controllerContext">The current RequestContext</param>
            <returns>if this item should be rendered</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.MenuItem.SetDisabledMenuItemClass(System.String)">
            <summary>
            The class to use when displaying an insecure menu item, won't be used if hiding insecure items (default behavior)
            </summary>
            <param name="itemClass"></param>
            <returns>this</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.MenuItem.SetShowWhenDisabled(System.Boolean)">
            <summary>
            Should the menu item be hidden or display with limited functionality when disabled
            </summary>
            <param name="hide">Set to true to hide the item, false to show it in a disabled format</param>
            <returns>this</returns>
        </member>
        <member name="T:MvcContrib.UI.Grid.RenderingContext">
            <summary>
            Context class used when rendering the grid.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataListExtensions.DataList``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a DataList.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="helper">The helper.</param>
            <param name="dataSource">The data source.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataListExtensions.DataList``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0},System.Func{System.Object,System.Object}[])">
            <summary>
            Create a DataList.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="helper">The helper.</param>
            <param name="dataSource">The data source.</param>
            <param name="tableAttributes">The table attributes.</param>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.Routing.RouteDebugger">
            <summary>
            Helper class for switching the default route handler to the debug route handler.
            </summary>
        </member>
        <member name="M:MvcContrib.Routing.RouteDebugger.RewriteRoutesForTesting(System.Web.Routing.RouteCollection)">
            <summary>
            Iterates over each route in the route collection and replaces the default route handler with a DebugRouteHandler.
            </summary>
            <param name="routes">The route table</param>
        </member>
        <member name="T:MvcContrib.Hash">
            <summary>
            Untyped, case insensitive dictionary that can be initialised using lambdas.
            </summary>
            <example>
            <![CDATA[
            IDictionary dict = new Hash(id => "foo", @class => "bar");
            ]]>
            </example>
        </member>
        <member name="T:MvcContrib.Hash`1">
            <summary>Case insensitive, strongly typed dictionary with string keys and <typeparamref name="TValue"/> values that can be initialised using lambdas.</summary>
            <typeparam name="TValue">The type of values to create.</typeparam>
            <example lang="c#">
            <![CDATA[
            //IDictionary<string,string> dict = new Dictionary<string, string>(2, StringComparer.OrdinalIgnoreCase);
            //dict.Add("id", "foo");
            //dict.Add("class", "bar")
            IDictionary<string, string> dict = new Hash<string>(id => "foo", @class => "bar");
            ]]>
            </example>
        </member>
        <member name="P:MvcContrib.Hash`1.Empty">
            <summary>Creates an empty case insensitive dictionary of <see cref="T:System.String"/> keys and <typeparam name="TValue"/> values.</summary>
        </member>
        <member name="M:MvcContrib.DictionaryExtensions.Add``1(System.Collections.Generic.IDictionary{System.String,``0},System.Func{System.Object,``0}[])">
            <summary>Extension Method to initialize an <see cref="T:System.Collections.Generic.Dictionary`2"/></summary>
            <param name="dict"></param>
            <param name="hash">The key / value pairs to add to the dictionary.</param>
            <returns>The the dictionary.</returns>
        </member>
        <member name="M:MvcContrib.DictionaryExtensions.Add(System.Collections.IDictionary,System.Func{System.Object,System.Object}[])">
            <summary>Extension Method to initialize an <see cref="T:System.Collections.IDictionary"/></summary>
            <param name="dict"></param>
            <param name="hash">The key / value pairs to add to the dictionary.</param>
            <returns>The the dictionary.</returns>
        </member>
        <member name="M:MvcContrib.DictionaryExtensions.AnonymousObjectToCaseSensitiveDictionary(System.Object)">
            <summary>
            Takes an anonymous object and converts it to a <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <param name="objectToConvert">The object to convert</param>
            <returns>A generic dictionary</returns>
        </member>
        <member name="T:MvcContrib.Filters.SubControllerActionToViewDataAttribute">
            <summary>
             Takes the System.Action from GetResult of subcontrollers and adds it to ViewData using the key that is equal to the action parameter name for the subcontroller.
            </summary>
        </member>
        <member name="M:MvcContrib.Filters.SubControllerActionToViewDataAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
             Adds to ViewData before the Action executes.
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:MvcContrib.ControllerExtensions">
            <summary>
             Static class containing extension methods for controllers
            </summary>
        </member>
        <member name="M:MvcContrib.ControllerExtensions.RedirectToAction``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Redirects to an action on the same controller using expression-based syntax
            </summary>
            <typeparam name="T">The type of the controller on which to call the action</typeparam>
            <param name="controller">The instance of the controller of type <typeparamref name="T"/> which provides access to this method</param>
            <param name="action">An expression which identifies the action to redirect to on the controller of type <typeparamref name="T"/></param>
            <returns>A <see cref="T:System.Web.Mvc.RedirectToRouteResult"/> pointing to the action specified by the <paramref name="action"/> expression</returns>
        </member>
        <member name="M:MvcContrib.ControllerExtensions.RedirectToAction``1(System.Web.Mvc.Controller,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Redirects to an action on the same or another controller using expression-based syntax
            </summary>
            <typeparam name="T">The type of the controller on which to call the action</typeparam>
            <param name="controller">The instance of the controller which provides access to this method</param>
            <param name="action">An expression which identifies the action to redirect to on the controller of type <typeparamref name="T"/></param>
            <returns>A <see cref="T:System.Web.Mvc.RedirectToRouteResult"/> pointing to the action specified by the <paramref name="action"/> expression</returns>
        </member>
        <member name="M:MvcContrib.ControllerExtensions.IsController(System.Type)">
            <summary>
            Determines whether the specified type is a controller
            </summary>
            <param name="type">Type to check</param>
            <returns>True if type is a controller, otherwise false</returns>
        </member>
        <member name="T:MvcContrib.Filters.ModelStateToTempDataAttribute">
            <summary>
            When a RedirectToRouteResult is returned from an action, anything in the ViewData.ModelState dictionary will be copied into TempData.
            When a ViewResult is returned from an action, any ModelState entries that were previously copied to TempData will be copied back to the ModelState dictionary.
            </summary>
        </member>
        <member name="M:MvcContrib.Filters.ModelStateToTempDataAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            When a RedirectToRouteResult is returned from an action, anything in the ViewData.ModelState dictionary will be copied into TempData.
            When a ViewResult is returned from an action, any ModelState entries that were previously copied to TempData will be copied back to the ModelState dictionary.
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:MvcContrib.UI.MenuBuilder.SecureActionMenuItem`1">
            <summary>
             Used internally to create the menu, use MvcContrib.UI.MenuBuilder.Menu to create a menu.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.MenuBuilder.ActionMenuItem`1">
            <summary>
             Used internally to create the menu, use MvcContrib.UI.MenuBuilder.Menu to create a menu.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.ActionMenuItem`1.SplitPascalCase(System.String)">
            <summary>
            Replaces pascal casing with spaces. For example "CustomerId" would become "Customer Id".
            Strings that already contain spaces are ignored.
            </summary>
            <param name="input">String to split</param>
            <returns>The string after being split</returns>
        </member>
        <member name="M:MvcContrib.UI.Html.HtmlHelperExtension.ResolveUrl(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Normalizes a url in the form ~/path/to/resource.aspx.
            </summary>
            <param name="html"></param>
            <param name="relativeUrl"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.HtmlHelperExtension.Stylesheet(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Renders a link tag referencing the stylesheet.  Assumes the CSS is in the /content/css directory unless a
            full relative URL is specified.
            </summary>
            <param name="html"></param>
            <param name="cssFile"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.HtmlHelperExtension.Stylesheet(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Renders a link tag referencing the stylesheet.  Assumes the CSS is in the /content/css directory unless a
            full relative URL is specified.  Also provides an additional parameter to specify the media
            that the stylesheet is targeting.
            </summary>
            <param name="html"></param>
            <param name="cssFile"></param>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.HtmlHelperExtension.ScriptInclude(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Renders a script tag referencing the javascript file.  Assumes the file is in the /scripts directory
            unless a full relative URL is specified.
            </summary>
            <param name="html"></param>
            <param name="jsFile"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.HtmlHelperExtension.Favicon(System.Web.Mvc.HtmlHelper)">
            <summary>
            Renders a favicon link tag.  Points to ~/favicon.ico.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.UI.Grid.SortableLinkRenderer`1">
            <summary>
            Renders links for sortable column headers in a sorted grid based on current HttpRequest params and column state.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MvcContrib.UI.Grid.SortableLinkRenderer`1.SortLink">
            <summary>
            The link to use in a sortable column that will provide data to help sort the underlying grid's data source.
            </summary>
            <returns>an html hyperlink tag with the url and name set.</returns>
        </member>
        <member name="T:MvcContrib.SubController">
            <summary>
             SubController base class for subcontrollers.  SubControllers can  be infinitely nested.
            </summary>
        </member>
        <member name="T:MvcContrib.ISubController">
            <summary>
             Interface that represents a subcontroller
            </summary>
        </member>
        <member name="M:MvcContrib.ISubController.GetResult(System.Web.Mvc.ControllerBase)">
            <summary>
             Gets and action that can later be invoked to produce the behavior of the subcontroller
            </summary>
            <param name="parentController">The controller depending on the subcontroller.  The subcontroller uses the ControllerContext of the parent to create a new RequestContext.</param>
            <returns>System.Action</returns>
        </member>
        <member name="M:MvcContrib.SubController.GetNewRequestContextFromController(System.Web.Mvc.ControllerBase)">
            <summary>
             Gets new RequestContext using objects from parent controller.  This ensures subcontrollers have their own state that doesn't conflict with the parent.
            </summary>
            <param name="parentController">Parent controller</param>
            <returns>RequestContext</returns>
        </member>
        <member name="M:MvcContrib.SubController.GetControllerName">
            <summary>
             Gets the name from the type by trimming "controller" and "subcontroller" from the type name.  The subcontroller action must match the controller name.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.SubController`1">
            <summary>
             SubController with generic Model property.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MvcContrib.ISubController`1">
            <summary>
             SubController with typed Model property for parameter passing from a parent controller.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MvcContrib.ISubController`1.Model">
            <summary>
             Gets and sets a model object that matches the generic type.
            </summary>
        </member>
        <member name="T:MvcContrib.Services.EmailTemplateService">
            <remarks>
            Inspired by Castle's EmailTemplateService.
            </remarks>
        </member>
        <member name="T:MvcContrib.Routing.RegexRoute">
            <summary>
            This class can be used to create routes from a regular expression. 
            It is also bidirectional and can be used to generate urls from a given route.
            </summary>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.#ctor(System.String,System.Web.Routing.IRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcContrib.Routing.RegexRoute"/> class given a regular expression and a route handler.
            </summary>
            <param name="regex">The regular expression that this route handler is supposed to handle.</param>
            <param name="routeHandler">The route handler to handle this route.</param>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.#ctor(System.String,System.String,System.Web.Routing.IRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcContrib.Routing.RegexRoute"/> class given a regular expression and a route 
            handler and a url generator to use to generate urls that would be handled by this route.
            </summary>
            <param name="regex">The regular expression that this route handler is supposed to handle.</param>
            <param name="urlGenerator">The URL generator; used to generate urls for this route.</param>
            <param name="routeHandler">The route handler to handle this route.</param>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.#ctor(System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.IRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcContrib.Routing.RegexRoute"/> class.
            </summary>
            <param name="regex">The regular expression that this route handler is supposed to handle.</param>
            <param name="defaults">Default route values for this route.</param>
            <param name="routeHandler">The route handler to handle this route.</param>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.#ctor(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.IRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcContrib.Routing.RegexRoute"/> class.
            </summary>
            <param name="regex">The regular expression that this route handler is supposed to handle.</param>
            <param name="urlGenerator">The URL generator; used to generate urls for this route.</param>
            <param name="defaults">Default route values for this route.</param>
            <param name="routeHandler">The route handler to handle this route.</param>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.#ctor(System.String,System.Func{System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,MvcContrib.Routing.RegexRoute,System.Web.Routing.VirtualPathData},System.Web.Routing.IRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcContrib.Routing.RegexRoute"/> class.
            </summary>
            <param name="regex">The regular expression that this route handler is supposed to handle.</param>
            <param name="getVirtualPath">A function to use to generate a virtual path given the request context, incoming route value dictionary and this <see cref="T:MvcContrib.Routing.RegexRoute"/> instance.</param>
            <param name="routeHandler">The route handler to handle this route.</param>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.#ctor(System.String,System.Func{System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,MvcContrib.Routing.RegexRoute,System.Web.Routing.VirtualPathData},System.Web.Routing.RouteValueDictionary,System.Web.Routing.IRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcContrib.Routing.RegexRoute"/> class.
            </summary>
            <param name="regex">The regular expression that this route handler is supposed to handle.</param>
            <param name="getVirtualPath">A function to use to generate a virtual path given the request context, incoming route value dictionary and this <see cref="T:MvcContrib.Routing.RegexRoute"/> instance.</param>
            <param name="defaults">Default route values for this route.</param>
            <param name="routeHandler">The route handler to handle this route.</param>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.#ctor(System.String,System.String,System.Func{System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,MvcContrib.Routing.RegexRoute,System.Web.Routing.VirtualPathData},System.Web.Routing.RouteValueDictionary,System.Web.Routing.IRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcContrib.Routing.RegexRoute"/> class.
            </summary>
            <param name="regex">The regular expression that this route handler is supposed to handle.</param>
            <param name="urlGenerator">The URL generator; used to generate urls for this route.</param>
            <param name="getVirtualPath">A function to use to generate a virtual path given the request context, incoming route value dictionary and this <see cref="T:MvcContrib.Routing.RegexRoute"/> instance.</param>
            <param name="defaults">Default route values for this route.</param>
            <param name="routeHandler">The route handler to handle this route.</param>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Used to get a virtual path for a given set of route settings.
            If the combination of defaults/values doesn't satisfy the url generator tokens: null is returned, 
            signaling that this route isn't correct for the given values.
            </summary>
            <remarks>
            This function is not used for figuring out the routes. It is only used for generating links for new routes.
            </remarks>
            <param name="requestContext">The request context.</param>
            <param name="values">The settings to use to generate this virtual path.</param>
            <returns>A virtual path that represents the given settings.</returns>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            Gets the route data from an incoming request; parses the incoming virtual 
            path and returns the route data that was inside the url.
            </summary>
            <param name="httpContext">The HTTP context containing the url data.</param>
            <returns>Route data gleaned from the context.</returns>
        </member>
        <member name="M:MvcContrib.Routing.RegexRoute.GetRouteData(System.String)">
            <summary>
            Gets the route data from the request portion of the url.
            </summary>
            <param name="request">The request string (the part after the virtual directory but before the query string).</param>
            <returns>Route data gleaned from the context.</returns>
        </member>
        <member name="P:MvcContrib.Routing.RegexRoute.Defaults">
            <summary>
            Gets the default route value dictionary containing the default route settings.
            </summary>
            <value>The default settings for this route.</value>
        </member>
        <member name="P:MvcContrib.Routing.RegexRoute.RouteHandler">
            <summary>
            Gets the route handler handling this route.
            </summary>
            <value>The route handler that handles this route.</value>
        </member>
        <member name="P:MvcContrib.Routing.RegexRoute.UrlGenerator">
            <summary>
            Gets the string used to generate mvc urls for this route.
            </summary>
            <value>The string used to generate urls for this route.</value>
        </member>
        <member name="T:MvcContrib.Attributes.AcceptGetAttribute">
            <summary>
            Ensures that an action is not executed unless it is accessed through an HTTP GET.
            </summary>
        </member>
        <member name="M:MvcContrib.Attributes.AcceptGetAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
            <summary>
            Ensures that the action decorated by this attribute is only valid if the HTTP method is a GET.
            </summary>
            <param name="controllerContext">The current controller context</param>
            <param name="methodInfo">The current action method</param>
            <returns>True if the action is being accessed via an HTTP GET</returns>
        </member>
        <member name="T:MvcContrib.UI.Grid.ColumnBuilder`1">
            <summary>
            Builds grid columns
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.ColumnBuilder`1.For(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies a column should be constructed for the specified property.
            </summary>
            <param name="propertySpecifier">Lambda that specifies the property for which a column should be constructed</param>
        </member>
        <member name="M:MvcContrib.UI.Grid.ColumnBuilder`1.For(System.String)">
            <summary>
            Specifies that a custom column should be constructed with the specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MvcContrib.HttpContextExtensions">
            <summary>
            Static class containing extenstion to HttpContextBase
            </summary>
        </member>
        <member name="M:MvcContrib.HttpContextExtensions.IsAjax(System.Web.HttpRequestBase)">
            <summary>
            Determines if the current request is an ajax request
            </summary>
            <param name="request">Instance of the HttpRequestBase for the request</param>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.Filters.TempDataToViewDataAttribute">
            <summary>
            Action filter that copies the contents of TempData into ViewData if a ViewResult is returned by a controller action.
            </summary>
        </member>
        <member name="M:MvcContrib.Filters.TempDataToViewDataAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            If a ViewResult is returned by a Controller Action, the contents of the TempData dictionary is copied to the ViewData dictionary.
            </summary>
            <param name="filterContext">The ActionExecutedContext</param>
        </member>
        <member name="T:MvcContrib.Filters.PassParametersDuringRedirectAttribute">
            <summary>
            When placed on a controller or action, this attribute will ensure
            that parameters passed into RedirectToAction&lt;T&gt;() will get
            passed to the controller or action that this attribute is placed on.
            </summary>
        </member>
        <member name="M:MvcContrib.Filters.PassParametersDuringRedirectAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Loads parameters from TempData into the ActionParameters dictionary.
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:MvcContrib.Filters.PassParametersDuringRedirectAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Stores any parameters passed to the generic RedirectToAction method in TempData.
            </summary>
        </member>
        <member name="T:MvcContrib.ActionResults.PermanentRedirectResult">
            <summary>
            Action result that performs an HTTP 301 permanent redirect to a url.
            </summary>
            <example>
            <![CDATA[
            public PermanentRedirectResult OldActionName() {
            	return new PermanentRedirectResult("http://www.asp.net/mvc/");
            }
            ]]>
            </example>
        </member>
        <member name="M:MvcContrib.ActionResults.PermanentRedirectResult.#ctor">
            <summary>
            Creates a new instance of the PermanentRedirectResult class
            </summary>
        </member>
        <member name="M:MvcContrib.ActionResults.PermanentRedirectResult.#ctor(System.String)">
            <summary>
            Creates a new instance of the PermanentRedirectResult class
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:MvcContrib.ActionResults.PermanentRedirectResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Sends an HTTP 301 Permanent Redirect to the result stream.
            </summary>
            <param name="context">The controller context for the current request.</param>
        </member>
        <member name="P:MvcContrib.ActionResults.PermanentRedirectResult.Url">
            <summary>
            The url.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.GridRow`1">
            <summary>
            Represents a Grid Row
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridRow`1.StartSectionRenderer">
            <summary>
            Invokes the custom renderer defined (if any) for the start of the row. 
            Returns TRUE if custom rendering occurred (indicating that further rendering should stop) otherwise FALSE.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridRow`1.EndSectionRenderer">
            <summary>
            Invokes the custom renderer defined (if any) for the start of the row.
            Returns TRUE if custom rendering occurred (indicating that further rendering should stop) otherwise FALSE.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridRow`1.Attributes">
            <summary>
            Returns custom attributes for the row.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.ComparableSortList`1">
            <summary>
            A generic list container to sort the list by any identified property of the list type T.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MvcContrib.UI.Grid.ISortableDataSource`1">
            <summary>
            Any IEnumerable&lt;T&gt; based list that holds state for sorting.
            </summary>
            <typeparam name="T">The type of the obje underlying enumerable's instance.</typeparam>
        </member>
        <member name="T:MvcContrib.Pagination.PaginationHelper">
            <summary>
            Extension methods for creating paged lists.
            </summary>
        </member>
        <member name="M:MvcContrib.Pagination.PaginationHelper.AsPagination``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Converts the specified IEnumerable into an IPagination using the default page size and returns the specified page number.
            </summary>
            <typeparam name="T">Type of object in the collection</typeparam>
            <param name="source">Source enumerable to convert to the paged list.</param>
            <param name="pageNumber">The page number to return.</param>
            <returns>An IPagination of T</returns>
        </member>
        <member name="M:MvcContrib.Pagination.PaginationHelper.AsPagination``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Converts the speciied IEnumerable into an IPagination using the specified page size and returns the specified page. 
            </summary>
            <typeparam name="T">Type of object in the collection</typeparam>
            <param name="source">Source enumerable to convert to the paged list.</param>
            <param name="pageNumber">The page number to return.</param>
            <param name="pageSize">Number of objects per page.</param>
            <returns>An IPagination of T</returns>
        </member>
        <member name="T:MvcContrib.Pagination.IPagination">
            <summary>
            A collection of objects that has been split into pages.
            </summary>
        </member>
        <member name="P:MvcContrib.Pagination.IPagination.PageNumber">
            <summary>
            The current page number
            </summary>
        </member>
        <member name="P:MvcContrib.Pagination.IPagination.PageSize">
            <summary>
            The number of items in each page.
            </summary>
        </member>
        <member name="P:MvcContrib.Pagination.IPagination.TotalItems">
            <summary>
            The total number of items.
            </summary>
        </member>
        <member name="P:MvcContrib.Pagination.IPagination.TotalPages">
            <summary>
            The total number of pages.
            </summary>
        </member>
        <member name="P:MvcContrib.Pagination.IPagination.FirstItem">
            <summary>
            The index of the first item in the page.
            </summary>
        </member>
        <member name="P:MvcContrib.Pagination.IPagination.LastItem">
            <summary>
            The index of the last item in the page.
            </summary>
        </member>
        <member name="P:MvcContrib.Pagination.IPagination.HasPreviousPage">
            <summary>
            Whether there are pages before the current page.
            </summary>
        </member>
        <member name="P:MvcContrib.Pagination.IPagination.HasNextPage">
            <summary>
            Whether there are pages after the current page.
            </summary>
        </member>
        <member name="T:MvcContrib.Pagination.IPagination`1">
            <summary>
            Generic form of <see cref="T:MvcContrib.Pagination.IPagination"/>
            </summary>
            <typeparam name="T">Type of object being paged</typeparam>
        </member>
        <member name="T:MvcContrib.EnumerableExtensions.EnumerableExtensions">
            <summary>
            Extension methods on IEnumerable.
            </summary>
        </member>
        <member name="M:MvcContrib.EnumerableExtensions.EnumerableExtensions.ToSelectList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.String})">
            <summary>
            Converts the source sequence into an IEnumerable of SelectListItem
            </summary>
            <param name="items">Source sequence</param>
            <param name="nameSelector">Lambda that specifies the name for the SelectList items</param>
            <param name="valueSelector">Lambda that specifies the value for the SelectList items</param>
            <returns>IEnumerable of SelectListItem</returns>
        </member>
        <member name="M:MvcContrib.EnumerableExtensions.EnumerableExtensions.ToSelectList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.String},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Converts the source sequence into an IEnumerable of SelectListItem
            </summary>
            <param name="items">Source sequence</param>
            <param name="nameSelector">Lambda that specifies the name for the SelectList items</param>
            <param name="valueSelector">Lambda that specifies the value for the SelectList items</param>
            <param name="selectedItems">Those items that should be selected</param>
            <returns>IEnumerable of SelectListItem</returns>
        </member>
        <member name="M:MvcContrib.EnumerableExtensions.EnumerableExtensions.ToSelectList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.String},System.Func{``0,System.Boolean})">
            <summary>
            Converts the source sequence into an IEnumerable of SelectListItem
            </summary>
            <param name="items">Source sequence</param>
            <param name="nameSelector">Lambda that specifies the name for the SelectList items</param>
            <param name="valueSelector">Lambda that specifies the value for the SelectList items</param>
            <param name="selectedValueSelector">Lambda that specifies whether the item should be selected</param>
            <returns>IEnumerable of SelectListItem</returns>
        </member>
        <member name="T:MvcContrib.Binders.SubControllerBinder">
            <summary>
             Binder that creates SubControllers that are needed for an action method
            </summary>
        </member>
        <member name="M:MvcContrib.Binders.SubControllerBinder.CreateSubController(System.Type)">
            <summary>
             Creates the subcontroller given its type.  Override this method to wire into an IoC container
            </summary>
            <param name="destinationType">The type of subcontroller</param>
            <returns>an object instance</returns>
        </member>
        <member name="T:MvcContrib.UI.MenuBuilder.MenuList">
            <summary>
             Used internally to create the menu, use MvcContrib.UI.MenuBuilder.Menu to create a menu.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.MenuBuilder.Menu">
            <summary>
             Use this class to build fluent menus, with Menu.Begin
             See the MvcContrib.Samples.UI for details
            </summary>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Begin(MvcContrib.UI.MenuBuilder.MenuItem[])">
            <summary>
            Use this at the top of a fluent menu, with items in the params
            </summary>
            <param name="items">All of the menu items in this menu</param>
            <returns>The menu that was just created</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Items(System.String,MvcContrib.UI.MenuBuilder.MenuItem[])">
            <summary>
            Creates a submenu of items
            </summary>
            <param name="title">The title for this list</param>
            <param name="items">The items in this menu</param>
            <returns>The list of items</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Items(System.String,System.String,MvcContrib.UI.MenuBuilder.MenuItem[])">
            <summary>
            Creates a submenu of items
            </summary>
            <param name="title">The title for this list</param>
            <param name="items">The items in this menu</param>
            <param name="icon">The location of the icon to display</param>
            <returns>The list of items</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Secure``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Adds an item in secure fashion, confirming the user has permissions to access this item
            The permissions are determined via the AuthorizeAttribute. A title will be build out of the action name.
            </summary>
            <typeparam name="T">The controller that this action is in</typeparam>
            <param name="menuAction">The action that this menu should invoke</param>
            <returns>The menu item to be added to the list</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Secure``1(System.Linq.Expressions.Expression{System.Action{``0}},System.String)">
            <summary>
            Adds an item in secure fashion, confirming the user has permissions to access this item
            The permissions are determined via the AuthorizeAttribute
            </summary>
            <typeparam name="T">The controller that this action is in</typeparam>
            <param name="menuAction">The action that this menu should invoke</param>
            <param name="title">The title for this menu item</param>
            <returns>The menu item to be added to the list</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Secure``1(System.Linq.Expressions.Expression{System.Action{``0}},System.String,System.String)">
            <summary>
            Adds an item in secure fashion, confirming the user has permissions to access this item
            The permissions are determined via the AuthorizeAttribute
            </summary>
            <typeparam name="T">The controller that this action is in</typeparam>
            <param name="menuAction">The action that this menu should invoke</param>
            <param name="title">The title for this menu item</param>
            <param name="icon">The location of an icon file</param> 
            <returns>The menu item to be added to the list</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Action``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Adds an item. A title will be build out of the action name.
            </summary>
            <typeparam name="T">The controller that this action is in</typeparam>
            <param name="menuAction">The action that this menu should invoke</param>
            <returns>The menu item to be added to the list</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Action``1(System.Linq.Expressions.Expression{System.Action{``0}},System.String)">
            <summary>
            Adds an item. A title will be build out of the action name.
            </summary>
            <typeparam name="T">The controller that this action is in</typeparam>
            <param name="menuAction">The action that this menu should invoke</param>
            <param name="title">The title for this menu item</param>
            <returns>The menu item to be added to the list</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Action``1(System.Linq.Expressions.Expression{System.Action{``0}},System.String,System.String)">
            <summary>
            Adds an item. A title will be build out of the action name.
            </summary>
            <typeparam name="T">The controller that this action is in</typeparam>
            <param name="menuAction">The action that this menu should invoke</param>
            <param name="title">The title for this menu item</param>
            <param name="icon">The location of an icon file</param> 
            <returns>The menu item to be added to the list</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Link(System.String,System.String)">
            <summary>
            Adds an item that is a direct link instead of being built off of an action. Used links outside your site.
            </summary>
            <param name="title">The title for this menu item</param>
            <param name="url">The location to visit</param>
            <returns>The menu item to be added to the list</returns>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.Menu.Link(System.String,System.String,System.String)">
            <summary>
            Adds an item that is a direct link instead of being built off of an action. Used links outside your site.
            </summary>
            <param name="title">The title for this menu item</param>
            <param name="url">The location to visit</param>
            <param name="icon">The location of the icon file</param>
            <returns>The menu item to be added to the list</returns>
        </member>
        <member name="P:MvcContrib.UI.MenuBuilder.Menu.DefaultAnchorClass">
            <summary>
             The class to use on every anchor tag
            </summary>
        </member>
        <member name="P:MvcContrib.UI.MenuBuilder.Menu.DefaultIconClass">
            <summary>
            The class to use on every icon's image tag
            </summary>
        </member>
        <member name="P:MvcContrib.UI.MenuBuilder.Menu.DefaultItemClass">
            <summary>
            The class to use on every LI tag
            </summary>
        </member>
        <member name="P:MvcContrib.UI.MenuBuilder.Menu.DefaultListClass">
            <summary>
            The class to use on every UL tag
            </summary>
        </member>
        <member name="P:MvcContrib.UI.MenuBuilder.Menu.DefaultIconDirectory">
            <summary>
            The directory that icon images are located in
            </summary>
        </member>
        <member name="P:MvcContrib.UI.MenuBuilder.Menu.DefaultShowWhenDisabled">
            <summary>
            Should items that the user is not authorized to see be hidden or disabled? True for hidden.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.MenuBuilder.Menu.DefaultDisabledClass">
            <summary>
            The default css class to use for disabled items, if they are shown instead of hidden
            </summary>
        </member>
        <member name="P:MvcContrib.UI.MenuBuilder.Menu.DefaultSelectedClass">
            <summary>
            The default css class to use for selected items, based on the requested url and action
            </summary>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.MenuBuilderHtmlExtensions.Menu(System.Web.Mvc.HtmlHelper,MvcContrib.UI.MenuBuilder.MenuItem)">
            <summary>
            Render the menu to the current ViewContext
            </summary>
            <param name="helper"></param>
            <param name="menu">The menu to render</param>
        </member>
        <member name="T:MvcContrib.UI.Grid.GridModel`1">
            <summary>
            Default model for grid
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.IGridModel`1">
            <summary>
            Defines a grid model
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridModel`1.#ctor">
            <summary>
            Creates a new instance of the GridModel class
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridModel`1.Empty(System.String)">
            <summary>
            Text that will be displayed when the grid has no data.
            </summary>
            <param name="emptyText">Text to display</param>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridModel`1.Attributes(System.Func{System.Object,System.Object}[])">
            <summary>
            Defines additional attributes for the grid.
            </summary>
            <param name="hash"></param>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridModel`1.Attributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Defines additional attributes for the grid
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridModel`1.RenderUsing(MvcContrib.UI.Grid.IGridRenderer{`0})">
            <summary>
            Specifies the Renderer to use with this grid. If omitted, the HtmlTableGridRenderer will be used. 
            </summary>
            <param name="renderer">The Renderer to use</param>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridModel`1.Column">
            <summary>
            Column builder for this grid model
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridModel`1.MvcContrib#UI#Grid#IGridModel{T}#Sections">
            <summary>
            Section overrides for this grid model.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridModel`1.Sections">
            <summary>
            Section overrides for this grid model.
            </summary>
        </member>
        <member name="T:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler">
            <summary>A Rails inspired Restful Routing Handler</summary>
        </member>
        <member name="F:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.MatchAny">
            <summary>Matches anything.</summary>
        </member>
        <member name="F:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.MatchBase64Guid">
            <summary>Matches a base64 encoded <see cref="T:System.Guid"/></summary>
        </member>
        <member name="F:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.MatchGuid">
            <summary>Matches a <see cref="T:System.Guid"/><c>@"\{?[a-fA-F0-9]{8}(?:-(?:[a-fA-F0-9]){4}){3}-[a-fA-F0-9]{12}\}?"</c></summary>
        </member>
        <member name="F:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.MatchPositiveInteger">
            <summary>Matches a Positive <see cref="T:System.Int32"/> <c>@"\d{1,10}"</c></summary>
        </member>
        <member name="F:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.MatchPositiveLong">
            <summary>Matches a Positive <see cref="T:System.Int64"/> <c>@"\d{1,19}"</c></summary>
        </member>
        <member name="M:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.BuildRoutes(System.Web.Routing.RouteCollection)">
            <summary>
            Adds the set of SimplyRestful routes to the <paramref name="routeCollection"/>.
            By default a positive integer validator is set for the Id parameter of the <see cref="!:Route.Values"/>.
            </summary>
            <param name="routeCollection">The route collection to add the routes to.</param>
            <seealso cref="M:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.BuildRoutes(System.Web.Routing.RouteCollection,System.String,System.String,System.String)"/>
        </member>
        <member name="M:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.BuildRoutes(System.Web.Routing.RouteCollection,System.String)">
            <summary>
            Adds the set of SimplyRestful routes to the <paramref name="routeCollection"/>.
            By default a positive integer validator is set for the Id parameter of the <see cref="!:Route.Values"/>.
            </summary>
            <param name="routeCollection">The route collection to add the routes to.</param>
            <param name="areaPrefix">An area inside the site to prefix the <see cref="P:System.Web.Routing.Route.Url"/> with.</param>
            <seealso cref="M:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.BuildRoutes(System.Web.Routing.RouteCollection,System.String,System.String,System.String)"/>
            <example lang="c#">
            SimplyRestfulRouteHandler.BuildRoutes(RouteTable.Routes, "private/admin")
            // Generates the Urls private/admin/[controller]/new, private/admin/[controller]/[id]/edit, etc.
            </example>
        </member>
        <member name="M:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.BuildRoutes(System.Web.Routing.RouteCollection,System.String,System.String,System.String)">
            <summary>
            Adds the set of SimplyRestful routes to the <paramref name="routeCollection"/>.
            </summary>
            <param name="routeCollection">The route collection to add the  routes to.</param>
            <param name="controllerPath">The path to the controller, you can use the special matching [controller]</param>
            <param name="idValidationRegex">The <see cref="T:System.Text.RegularExpressions.Regex"/> 
            validator to add to the Id parameter of the <see cref="!:Route.Values"/>, use <c>null</c> to not validate the id.</param>
            <param name="controller">The name of the controller.  Only required if you are trying to route to a specific controller using a non-standard url.</param>
        </member>
        <member name="M:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.EnsureActionResolver(System.IServiceProvider)">
            <summary>Ensures that a <see cref="T:MvcContrib.SimplyRestful.IRestfulActionResolver"/> exists.</summary>
            <param name="serviceProvider">The <see cref="T:System.Web.HttpContextBase"/> as an <see cref="T:System.IServiceProvider"/> to try and use to resolve an instance of the <see cref="T:MvcContrib.SimplyRestful.IRestfulActionResolver"/></param>
            <remarks>If no <see cref="T:MvcContrib.SimplyRestful.IRestfulActionResolver"/> can be resolved the default <see cref="T:MvcContrib.SimplyRestful.RestfulActionResolver"/> is used.</remarks>
        </member>
        <member name="M:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.FixPath(System.String)">
            <summary>Fixes an area prefix for the route url.</summary>
            <param name="path">The area prefix to fix.</param>
            <returns>A non null string with leading and trailing /'s stripped</returns>
        </member>
        <member name="M:MvcContrib.SimplyRestful.SimplyRestfulRouteHandler.BuildDefaults(MvcContrib.SimplyRestful.RestfulAction,System.String)">
            <summary>Builds a Default object for a route.</summary>
            <param name="restfulAction">The default action for the route.</param>
            <param name="controllerName">The default controller for the route.</param>
            <returns>An Anonymous Type with a default Action property and and default Controller property
            if <paramref name="controllerName"/> is not null or empty.</returns>
        </member>
        <member name="T:MvcContrib.Attributes.AcceptPostAttribute">
            <summary>
            Ensures that an action is not executed unless it is accessed through an HTTP POST.
            </summary>
        </member>
        <member name="M:MvcContrib.Attributes.AcceptPostAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
            <summary>
            Ensures that the action decorated by this attribute is only valid if the HTTP method is a POST.
            </summary>
            <param name="controllerContext">The current controller context</param>
            <param name="methodInfo">The current action method</param>
            <returns>True if the action is being accessed via an HTTP POST</returns>
        </member>
        <member name="T:MvcContrib.UI.MenuBuilder.MenuHelpText">
            <summary>
             Apply this tag to an action to set a help text associated with it.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.MenuHelpText.#ctor(System.String)">
            <summary>
             Specify the help text associated with this action
            </summary>
            <param name="helpText"></param>
        </member>
        <member name="T:MvcContrib.UI.Grid.ColumnSortOptions">
            <summary>
            Maintains state data for sorted columns.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.ColumnSortOptions.IsDefault">
            <summary>
            Has column been identified as the default sorted column?
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.ColumnSortOptions.SortOrder">
            <summary>
            What is the current sort direction for this particular column?
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.ColumnSortOptions.SortByQueryParameterName">
            <summary>
            The parameter name to render for this columns's link based on the renderer rendering the columns's header.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.ColumnSortOptions.SortOrderQueryParameterName">
            <summary>
            The parameter name to render for this columns's link based on the renderer rendering the columns's header.
            </summary>
        </member>
        <member name="T:MvcContrib.Pagination.LazyPagination`1">
            <summary>
            Executes an IQueryable in order to created a paged set of objects.
            The query is not executed until the LazyPagination is enumerated or one of its properties is invoked.
            The results of the query are cached.
            </summary>
            <typeparam name="T">Type of objects in the collection.</typeparam>
        </member>
        <member name="F:MvcContrib.Pagination.LazyPagination`1.DefaultPageSize">
            <summary>
            Default page size.
            </summary>
        </member>
        <member name="M:MvcContrib.Pagination.LazyPagination`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:MvcContrib.Pagination.LazyPagination`1"/> class.
            </summary>
            <param name="query">The query to page.</param>
            <param name="pageNumber">The current page number.</param>
            <param name="pageSize">Number of items per page.</param>
        </member>
        <member name="M:MvcContrib.Pagination.LazyPagination`1.TryExecuteQuery">
            <summary>
            Executes the query if it has not already been executed.
            </summary>
        </member>
        <member name="M:MvcContrib.Pagination.LazyPagination`1.ExecuteQuery">
            <summary>
            Calls Queryable.Skip/Take to perform the pagination.
            </summary>
            <returns>The paged set of results.</returns>
        </member>
        <member name="P:MvcContrib.Pagination.LazyPagination`1.Query">
            <summary>
            The query to execute.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.IGridColumn`1">
            <summary>
            Grid Column fluent interface
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridColumn`1.Named(System.String)">
            <summary>
            Specified an explicit name for the column.
            </summary>
            <param name="name">Name of column</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridColumn`1.DoNotSplit">
            <summary>
            If the property name is PascalCased, it should not be split part.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridColumn`1.Format(System.String)">
            <summary>
            A custom format to use when building the cell's value
            </summary>
            <param name="format">Format to use</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridColumn`1.CellCondition(System.Func{`0,System.Boolean})">
            <summary>
            Delegate used to hide the contents of the cells in a column.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridColumn`1.Visible(System.Boolean)">
            <summary>
            Determines whether the column should be displayed
            </summary>
            <param name="isVisible"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridColumn`1.DoNotEncode">
            <summary>
            Do not HTML Encode the output
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridColumn`1.Sortable(System.Boolean)">
            <summary>
            Render column with sort link in header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridColumn`1.HeaderAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Defines additional attributes for the column heading.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.IGridColumn`1.Attributes(System.Func{MvcContrib.UI.Grid.GridRowViewData{`0},System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Defines additional attributes for the cell. 
            </summary>
            <param name="attributes">Lambda expression that should return a dictionary containing the attributes for the cell</param>
            <returns></returns>
        </member>
        <member name="P:MvcContrib.UI.Grid.IGridColumn`1.CustomHeaderRenderer">
            <summary>
            Custom header renderer
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.IGridColumn`1.CustomItemRenderer">
            <summary>
            Custom item renderer
            </summary>
        </member>
        <member name="T:MvcContrib.UI.CleanTagBuilder">
            <summary>
             Exactly like a tag builder, except doesn't leave empty attributes in the generated html
             TagBuilder: <li class=""></li>
             CleanTabBuilder: <li></li>
            </summary>
        </member>
        <member name="T:MvcContrib.ActionResults.PermanentRedirectToActionResult">
            <summary>
            Action Result that performs an HTTP 301 permanent redirect to an action.
            </summary>
            <example>
            <![CDATA[
            public PermanentRedirectToActionResult OldActionName(int id) {
            	return new PermanentRedirectToActionResult("NewActionName", new { id = id });
            }
            ]]>
            </example>
        </member>
        <member name="M:MvcContrib.ActionResults.PermanentRedirectToActionResult.#ctor(System.String)">
            <summary>
            Creates a new instance of the PermanentRedirectToActionResult class
            </summary>
            <param name="actionName">The name of the action.</param>
        </member>
        <member name="M:MvcContrib.ActionResults.PermanentRedirectToActionResult.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the PermanentRedirectToActionResult class
            </summary>
            <param name="actionName">The name of the action.</param>
            <param name="routeValues">An object containing the parameters for a route. The parameters are retrieved via reflection by examining the properties of the object. Typically created using object initializer syntax.</param>
        </member>
        <member name="M:MvcContrib.ActionResults.PermanentRedirectToActionResult.#ctor(System.String,System.String,System.Object)">
            <summary>
            Creates a new instance of the PermanentRedirectToActionResult class
            </summary>
            <param name="actionName">The name of the action.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">An object containing the parameters for a route. The parameters are retrieved via reflection by examining the properties of the object. Typically created using object initializer syntax.</param>
        </member>
        <member name="M:MvcContrib.ActionResults.PermanentRedirectToActionResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Calculates the url based on the values passed, and sends an HTTP 301 Permanent Redirect to the result stream.
            </summary>
            <param name="context">The controller context for the current request.</param>
        </member>
        <member name="P:MvcContrib.ActionResults.PermanentRedirectToActionResult.ControllerName">
            <summary>
            The name of the controller.
            </summary>
        </member>
        <member name="P:MvcContrib.ActionResults.PermanentRedirectToActionResult.ActionName">
            <summary>
            The name of the action.
            </summary>
        </member>
        <member name="P:MvcContrib.ActionResults.PermanentRedirectToActionResult.RouteValues">
            <summary>
            An object containing the parameters for a route. The parameters are retrieved via reflection by examining the properties of the object. Typically created using object initializer syntax.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.MenuBuilder.MenuTitle">
            <summary>
             Apply this tag to an action to set the title associated with it
            </summary>
        </member>
        <member name="M:MvcContrib.UI.MenuBuilder.MenuTitle.#ctor(System.String)">
            <summary>
             Specify the title text associated with this action
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:MvcContrib.UI.Grid.Syntax.IGridWithOptions`1.RenderUsing(MvcContrib.UI.Grid.IGridRenderer{`0})">
            <summary>
            Specifies that the grid should be rendered using a specified renderer.
            </summary>
            <param name="renderer">Renderer to use</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.Syntax.IGridWithOptions`1.Columns(System.Action{MvcContrib.UI.Grid.ColumnBuilder{`0}})">
            <summary>
            Specifies the columns to use. 
            </summary>
            <param name="columnBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.Syntax.IGridWithOptions`1.Empty(System.String)">
            <summary>
            Text to render when grid is empty.
            </summary>
            <param name="emptyText">Empty Text</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.Syntax.IGridWithOptions`1.Attributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Additional custom attributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.Syntax.IGridWithOptions`1.RowAttributes(System.Func{MvcContrib.UI.Grid.GridRowViewData{`0},System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Additional custom attributes for each row
            </summary>
            <param name="attributes">Lambda expression that returns custom attributes for each row</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.Syntax.IGridWithOptions`1.HeaderRowAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Additional custom attributes for the header row.
            </summary>
            <param name="attributes">Attributes for the header row</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.Syntax.IGridWithOptions`1.Render">
            <summary>
            Renders the grid to the TextWriter specified at creation
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcContrib.UI.Grid.Syntax.IGridWithOptions`1.Model">
            <summary>
            The GridModel that holds the internal representation of this grid.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.Syntax.IGrid`1.WithModel(MvcContrib.UI.Grid.IGridModel{`0})">
            <summary>
            Specifies a custom GridModel to use.
            </summary>
            <param name="model">The GridModel storing information about this grid</param>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.UI.Grid.GridSections`1">
            <summary>
            Sections for a grid.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.GridExtensions">
            <summary>
            Extension methods related to the Grid
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.Grid``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a grid using the specified datasource.
            </summary>
            <typeparam name="T">Type of datasouce element</typeparam>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.Grid``1(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a grid from an entry in the viewdata.
            </summary>
            <typeparam name="T">Type of element in the grid datasource.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.HeaderAttributes``1(MvcContrib.UI.Grid.IGridColumn{``0},System.Func{System.Object,System.Object}[])">
            <summary>
            Defines additional attributes for the column heading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.Attributes``1(MvcContrib.UI.Grid.Syntax.IGridWithOptions{``0},System.Func{System.Object,System.Object}[])">
            <summary>
            Defines additional attributes for a grid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.Attributes``1(MvcContrib.UI.Grid.IGridColumn{``0},System.Func{System.Object,System.Object}[])">
            <summary>
            Defines additional attributes for the cell. 
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.RowAttributes``1(MvcContrib.UI.Grid.IGridSections{``0},System.Func{MvcContrib.UI.Grid.GridRowViewData{``0},System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Associates custom attributes with every grid row.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.RowStart``1(MvcContrib.UI.Grid.IGridSections{``0},System.Func{MvcContrib.UI.Grid.GridRowViewData{``0},System.String})">
            <summary>
            Renders the specified text at the start of every row instead of the default output.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.RowEnd``1(MvcContrib.UI.Grid.IGridSections{``0},System.Func{MvcContrib.UI.Grid.GridRowViewData{``0},System.String})">
            <summary>
            Renders the specified text at the end of every row instead of the default output.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.RowStart``1(MvcContrib.UI.Grid.Syntax.IGridWithOptions{``0},System.Func{MvcContrib.UI.Grid.GridRowViewData{``0},System.String})">
            <summary>
            Renders the specified text at the start of every row instead of the default output.
            </summary>
            <param name="grid">The grid</param>
            <param name="rowStart">Lambda takes an instance of GridRowViewData and returns the string to render</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.RowEnd``1(MvcContrib.UI.Grid.Syntax.IGridWithOptions{``0},System.Func{MvcContrib.UI.Grid.GridRowViewData{``0},System.String})">
            <summary>
            Renders the specified text at the start of every row instead of the default output.
            </summary>
            <param name="grid">The grid</param>
            <param name="rowEnd">Lambda takes an instance of GridRowViewData and returns the string to render</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.Header``1(MvcContrib.UI.Grid.IGridColumn{``0},System.String)">
            <summary>
            The HTML that should be used to render the header for the column. This should include TD tags. 
            </summary>
            <param name="column">The current column</param>
            <param name="header">The format to use.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.Partial``1(MvcContrib.UI.Grid.IGridColumn{``0},System.String)">
            <summary>
            Specifies that a partial view should be used to render the contents of this column.
            </summary>
            <param name="column">The current column</param>
            <param name="partialName">The name of the partial view</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.HeaderRowAttributes``1(MvcContrib.UI.Grid.IGridSections{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Specifies custom attributes for the header row.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridExtensions.AutoGenerateColumns``1(MvcContrib.UI.Grid.Syntax.IGrid{``0})">
            <summary>
            Specifies that the grid's columns should be automatically generated from the public properties on the model object.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.SortableHtmlTableGridRenderer`1">
            <summary>
            Adds the header row with column name links which carry data to enable sorting.
            </summary>
            <typeparam name="T">The type of the object in the data source list of the grid to be rendered</typeparam>
        </member>
        <member name="T:MvcContrib.UI.Grid.HtmlTableGridRenderer`1">
            <summary>
            Renders a grid as an HTML table.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.HtmlTableGridRenderer`1.BuildHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts the specified attributes dictionary of key-value pairs into a string of HTML attributes. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.UI.Grid.ISortableGridRenderer`1">
            <summary>
            A IGridRenderer extension that takes a sortable data source.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MvcContrib.UI.Grid.SortableHtmlTableGridRenderer`1.#ctor(System.Web.Mvc.ViewEngineCollection)">
            <summary>
            Creates an instance of a SortableHtmlTableGridRenderer to render a sortable grid.
            </summary>
            <param name="engines">The view engines used by the renderer</param>
        </member>
        <member name="M:MvcContrib.UI.Grid.SortableHtmlTableGridRenderer`1.#ctor">
            <summary>
            Creates an instance of a SortableHtmlTableGridRenderer to render a sortable grid.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.SortableHtmlTableGridRenderer`1.#ctor(System.String,System.String)">
             <summary>
             Creates an instance of a SortableHtmlTableGridRenderer to render a sortable grid.
             </summary>
            <param name="orderByQueryStringName">The name of the query string parameter which carries the name of the column to sort by.</param>
            <param name="sortOrderQueryStringName">The name of the query string parameter which carries order direction.</param>
        </member>
        <member name="M:MvcContrib.UI.Grid.SortableHtmlTableGridRenderer`1.WithQueryParameterNames(System.String,System.String)">
             <summary>
             Fluent query string parameter name modifer for renderer instance.
             </summary>
            <param name="sortByParameterName">The name of the query string parameter which carries the name of the column to sort by.</param>
            <param name="sortOrderParameterName">The name of the query string parameter which carries order direction.</param>
             <returns></returns>
        </member>
        <member name="P:MvcContrib.UI.Grid.SortableHtmlTableGridRenderer`1.OrderQueryStringName">
            <summary>
            The name of the query string parameter which carries order direction. SortOrder by default.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.SortableHtmlTableGridRenderer`1.ColumnQueryStringName">
            <summary>
            The name of the query string parameter which carries the name of the column to sort by. SortBy by default.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.DataList.DataList`1">
            <summary>
            By default, the DataList displays the items in a single column, However, you can specify any number of columns.
            </summary>
            <example>
            <code>
                  Html.DataList(_dataSource)
                      .NumberOfColumns(3)
                      .RepeatHorizontally()
                      .CellTemplate(x =&gt; { Writer.Write(x.ToLower()); })
                      .CellCondition(x =&gt; x == &quot;test1&quot;)
                      .EmptyDateSourceTemplate(() =&gt; { Writer.Write(&quot;There is no data available.&quot;); })
                      .NoItemTemplate(() =&gt; { Writer.Write(&quot;No Data.&quot;); });
            </code>
            </example>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcContrib.UI.DataList.DataList`1"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.IO.TextWriter,MvcContrib.Hash)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcContrib.UI.DataList.DataList`1"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="writer">The writer.</param>
            <param name="tableAttributes">The table attributes.</param>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.CellTemplate(System.Action{`0})">
            <summary>
            The main cell template.
            </summary>
            <param name="contentTemplate">The template.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.EmptyDateSourceTemplate(System.Action)">
            <summary>
            If you provide an empty date source the it will use this template in the first cell.
            </summary>
            <param name="template">The template.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.NoItemTemplate(System.Action)">
            <summary>
            If you have lets say two items and you repeat 3 times
            then one cell is going to be empty so fill it with this template.
            </summary>
            <param name="template">The template.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.CellCondition(System.Func{`0,System.Boolean})">
            <summary>
            Filters the items that will be rendered (This should normally be done in the database)
            </summary>
            <param name="func">The condition to check.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.CellAttributes(System.Func{System.Object,System.Object}[])">
            <summary>
            Attributes that go on every cell (&lt;td id=&quot;foo&quot; class=&quot;bar&quot;&gt;).
            </summary>
            <example>CellAttributes(id =&gt; &quot;foo&quot;, @class =&gt; &quot;bar&quot;)</example>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.ShouldRenderCell(`0)">
            <summary>
            Checks if a item should be rendered, this checks <see cref="M:MvcContrib.UI.DataList.DataList`1.CellCondition(System.Func{`0,System.Boolean})"/>.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.NumberOfColumns(System.Int32)">
            <summary>
            The amount of Columns to render.
            </summary>
            <param name="amount">The amount.</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.RepeatVertically">
            <summary>
            Repeats the items vertically.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.RepeatHorizontally">
            <summary>
            Repeats the items horizontally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.RenderCell(`0)">
            <summary>
            Renders the cell.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.Render">
            <summary>
            Renders this DataList.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.DataList.DataList`1.ToString">
            <summary>
            Renders to the TextWriter, and returns null. 
            This is by design so that it can be used with inline syntax in views.
            </summary>
            <returns>null</returns>
        </member>
        <member name="P:MvcContrib.UI.DataList.DataList`1.RepeatDirection">
            <summary>
            Gets or sets the repeat direction.
            </summary>
            <value>The repeat direction.</value>
        </member>
        <member name="P:MvcContrib.UI.DataList.DataList`1.RepeatColumns">
            <summary>
            Gets or sets the the amount of columns to display.
            </summary>
            <remarks>
            If this property is set to 0, the DataList will displays its items in a single row or column, based on the value of the RepeatDirection property.
            </remarks>
            <value>The repeat columns.</value>
        </member>
        <member name="P:MvcContrib.UI.DataList.DataList`1.ItemRenderer">
            <summary>
            Gets or sets the item renderer. You should use <see cref="M:MvcContrib.UI.DataList.DataList`1.CellTemplate(System.Action{`0})"/>
            </summary>
            <value>The item renderer.</value>
        </member>
        <member name="T:MvcContrib.Pagination.CustomPagination`1">
            <summary>
            Implementation of IPagination that wraps a pre-paged data source. 
            </summary>
        </member>
        <member name="M:MvcContrib.Pagination.CustomPagination`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of CustomPagination
            </summary>
            <param name="dataSource">A pre-paged slice of data</param>
            <param name="pageNumber">The current page number</param>
            <param name="pageSize">The number of items per page</param>
            <param name="totalItems">The total number of items in the overall datasource</param>
        </member>
        <member name="T:MvcContrib.Routing.MvcRoute">
            <summary>
             Use this class to define url->controller action mappings
            </summary>
        </member>
        <member name="M:MvcContrib.Routing.MvcRoute.MappUrl(System.String)">
            <summary>
             Fluent interface start method
            </summary>
            <param name="url">The url pattern</param>
        </member>
        <member name="M:MvcContrib.Routing.MvcRoute.ToDefaultAction``1(System.Linq.Expressions.Expression{System.Func{``0,System.Web.Mvc.ActionResult}},System.Object)">
            <summary>
             Sets the default controller, action and parameters via a lambda method, you can also 
             specify additional defaults
            </summary>
            <param name="action">default action</param>
            <param name="defaults">other default parameters</param>
        </member>
        <member name="M:MvcContrib.Routing.MvcRoute.ToDefaultAction``1(System.Linq.Expressions.Expression{System.Func{``0,System.Web.Mvc.ActionResult}})">
            <summary>
             Sets the default controller, action and parameters via a lambda method
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MvcContrib.Routing.MvcRoute.WithConstraints(System.Object)">
            <summary>
            Add constraints to this route
            </summary>
            <param name="constraints">The constraints defined as an anonymous object</param>
        </member>
        <member name="M:MvcContrib.Routing.MvcRoute.WithDefaults(System.Object)">
            <summary>
            Add defaults to this route, if you use the ToDefaultAction 
            method the controller and action default will be overwritten.
            </summary>
            <param name="defaults">The defaults defined as an anonymous object</param>
        </member>
        <member name="M:MvcContrib.Routing.MvcRoute.WithNamespaces(System.String[])">
            <summary>
             Sets the list of namespaces to look for controllers
            </summary>
            <param name="namespaces">An array of namespaces</param>
        </member>
        <member name="M:MvcContrib.Routing.MvcRoute.AddWithName(System.String,System.Web.Routing.RouteCollection)">
            <summary>
             Add this route to the route collection with the specified name
            </summary>
            <param name="routeName">The name of the route</param>
            <param name="routes">The route collection to add the route to</param>
        </member>
        <member name="T:MvcContrib.Filters.LayoutAttribute">
            <summary>
            Decorates a controller class to denote the default layout for all actions on the controller.
            Use:  define a layout at the class level (without an extension) and omit the layout from each return View() call.
            This will override the masterName selection from your individual actions.  To override this attribute at the action level, 
            apply the attribute to that action.
            
            To specify no layout, use [Layout(null)] or [Layout("")].
            </summary>
        </member>
        <member name="M:MvcContrib.Filters.LayoutAttribute.#ctor(System.String)">
            <summary>
            Creates a LayoutAttribute.
            </summary>
            <param name="layout">The default layout to use.  Do not specify the extension.</param>
        </member>
        <member name="M:MvcContrib.Filters.LayoutAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Captures the result executing to inject a default layout.
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="P:MvcContrib.Filters.LayoutAttribute.Layout">
            <summary>
            The default layout.  Do not specify the extension.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Pager.PaginationExtensions">
            <summary>
            Extension methods for the pager.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Pager.PaginationExtensions.Pager(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a pager component using the item from the viewdata with the specified key as the datasource.
            </summary>
            <param name="helper">The HTML Helper</param>
            <param name="viewDataKey">The viewdata key</param>
            <returns>A Pager component</returns>
        </member>
        <member name="M:MvcContrib.UI.Pager.PaginationExtensions.Pager(System.Web.Mvc.HtmlHelper,MvcContrib.Pagination.IPagination)">
            <summary>
            Creates a pager component using the specified IPagination as the datasource.
            </summary>
            <param name="helper">The HTML Helper</param>
            <param name="pagination">The datasource</param>
            <returns>A Pager component</returns>
        </member>
        <member name="T:MvcContrib.UI.Grid.GridColumn`1">
            <summary>
            Column for the grid
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridColumn`1.#ctor(System.Func{`0,System.Object},System.String,System.Type)">
            <summary>
            Creates a new instance of the GridColumn class
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridColumn`1.GetValue(`0)">
            <summary>
            Gets the value for a particular cell in this column
            </summary>
            <param name="instance">Instance from which the value should be obtained</param>
            <returns>Item to be rendered</returns>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridColumn`1.Name">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridColumn`1.DisplayName">
            <summary>
            Display name for the column
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridColumn`1.ColumnType">
            <summary>
            The type of the object being rendered for thsi column. 
            Note: this will return null if the type cannot be inferred.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridColumn`1.CustomHeaderRenderer">
            <summary>
            Custom header renderer
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridColumn`1.CustomItemRenderer">
            <summary>
            Custom item renderer
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridColumn`1.HeaderAttributes">
            <summary>
            Additional attributes for the column header
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridColumn`1.Attributes">
            <summary>
            Additional attributes for the cell
            </summary>
        </member>
        <member name="T:MvcContrib.ActionResults.XmlResult">
            <summary>
            Action result that serializes the specified object into XML and outputs it to the response stream.
            <example>
            <![CDATA[
            public XmlResult AsXml() {
            	List<Person> people = _peopleService.GetPeople();
            	return new XmlResult(people);
            }
            ]]>
            </example>
            </summary>
        </member>
        <member name="M:MvcContrib.ActionResults.XmlResult.#ctor(System.Object)">
            <summary>
            Creates a new instance of the XmlResult class.
            </summary>
            <param name="objectToSerialize">The object to serialize to XML.</param>
        </member>
        <member name="M:MvcContrib.ActionResults.XmlResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Serialises the object that was passed into the constructor to XML and writes the corresponding XML to the result stream.
            </summary>
            <param name="context">The controller context for the current request.</param>
        </member>
        <member name="P:MvcContrib.ActionResults.XmlResult.ObjectToSerialize">
            <summary>
            The object to be serialized to XML.
            </summary>
        </member>
        <member name="M:MvcContrib.ViewDataExtensions.Add``1(System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <summary>
            Adds an object using the type as the dictionary key
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Html.HtmlStringExtensions">
            <summary>
            Extension methods to turn quickly turn a value / key pair into an attribute="value" html string
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Html.HtmlStringExtensions.AsAttribute(System.String,System.String)">
            <summary>
            Returns ' attribute="value"' if value is not null or empty
            </summary>
            <param name="value">The value to print</param>
            <param name="attributeName">The html attribute</param>
            <returns>An attribute string</returns>
        </member>
        <member name="M:MvcContrib.UI.Html.HtmlStringExtensions.AsClassAttribute(System.String)">
            <summary>
            Returns ' class="value"' if value is not null or empty
            </summary>
            <param name="value">The value to print</param>
            <returns>An attribute string</returns>
        </member>
        <member name="T:MvcContrib.ActionResults.RedirectToRouteResult`1">
            <summary>
            Represents a result that performs a redirect using a lambda expression to generate the route values.
            </summary>
            <typeparam name="T">Type of controller</typeparam>
        </member>
        <member name="M:MvcContrib.ActionResults.RedirectToRouteResult`1.#ctor(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Creates a new instance of the RedirectToRouteResult class.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:MvcContrib.ActionResults.RedirectToRouteResult`1.#ctor(System.Linq.Expressions.Expression{System.Action{`0}},MvcContrib.ActionResults.ExpressionToRouteValueConverter{`0})">
            <summary>
            Creates a new instance of the RedirectToRouteResult class using the specified ExpressionParser
            </summary>
        </member>
        <member name="P:MvcContrib.ActionResults.RedirectToRouteResult`1.Expression">
            <summary>
            The route values.
            </summary>
        </member>
        <member name="F:MvcContrib.Attributes.RequestStore.QueryString">
            <summary>
             Sets paramter values from Request.QueryString
            </summary>
        </member>
        <member name="F:MvcContrib.Attributes.RequestStore.Form">
            <summary>
             Sets parameter values from Request.Form
            </summary>
        </member>
        <member name="F:MvcContrib.Attributes.RequestStore.Params">
            <summary>
             Sets parameter values from all of the above locations in the above order
             If a parameter value is found in more than one location, they will be returned in comma separated form in the above order
             e.g. QueryString = 4, Form = 6 "4,6"
            </summary>
        </member>
        <member name="F:MvcContrib.Attributes.RequestStore.TempData">
            <summary>
             Sets parameter values from Controller.TempData only
            </summary>
        </member>
        <member name="F:MvcContrib.Attributes.RequestStore.All">
            <summary>
             Sets parameter values from all fo the above locations in the above order
             If a parameter value is found in more than one location, they will be returned in comma separated form in the above order
             e.g. QueryString = 4, Form = 6, TempData = 2, RouteData = 1 "4,6,3,2"
            </summary>
        </member>
        <member name="T:MvcContrib.UrlHelperExtensions">
            <summary>
            Extension methods for UrlHelper
            </summary>
        </member>
        <member name="F:MvcContrib.UI.Html.ModelVisualizerExtension.HtmlContainer">
            <summary>
            Snipped that allows the rendered table to be collapsed
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Html.ModelVisualizerExtension.ModelVisualizer(System.Web.Mvc.HtmlHelper)">
            <summary>
            Renders Model as table
            </summary>
            <param name="htmlHelper"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.ModelVisualizerExtension.RenderSelectListTable(System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
            render items of SelectList (ie for DropDown)
            </summary>
            <param name="selectListToRender"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.ModelVisualizerExtension.RenderObjectTable(System.Object)">
            <summary>
            Render properties of an object as table
            </summary>
            <param name="objectToRender"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.ModelVisualizerExtension.RenderGenericList(System.Collections.IEnumerable)">
            <summary>
            Render list of objects
            </summary>
            <param name="listToRender"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.ModelVisualizerExtension.IsMicrosoftType(System.Type)">
            <summary>
            Framework types are rendered with "ToString"
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.ModelVisualizerExtension.RenderDictionaryTable(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Enables Rendering of typed Model and untyped ViewData
            </summary>
            <param name="viewData"></param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Html.ModelVisualizerExtension.ModelToHtmlTable(System.Object)">
            <summary>
            render object as table
            </summary>
            <param name="objectToRender"></param>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.UI.Grid.GridRowViewData`1">
            <summary>
            Used as viewdata for partials rendered for RowStart/RowEnd
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.GridRowViewData`1.#ctor(`0,System.Boolean)">
            <summary>
            Creates a new instance of the GridRowViewData class.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridRowViewData`1.Item">
            <summary>
            The current item for this row in the data source.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.GridRowViewData`1.IsAlternate">
            <summary>
            Whether this is an alternating row
            </summary>
        </member>
        <member name="T:MvcContrib.Routing.DebugRouteHandler">
            <summary>
            Route handler that ensures all requestes are routed to the DebugHttpHandler.
            </summary>
        </member>
        <member name="T:MvcContrib.Filters.RegExPreconditionFilter">
            <author>Troy DeMonbreun</author>
            <summary>
            This is an action attribute that defines (via a regular expression) a required RouteData or Request
            parameter "precondition" for the action. On precondition failure, the specified Exception type will be thrown.
            More info <see href="http://blog.troyd.net/ASPNET+MVC+Controller+Action+Precondition+Filter+V2+Now+Part+Of+MVCContrib+Project.aspx">here</see>.
            </summary>
            <example>
            <code>
            [RegExPreconditionFilter("id", PreconditionFilter.ParamType.RouteData, "^[1-9][0-9]*$", typeof(ArgumentOutOfRangeException))]
            OR
            [RegExPreconditionFilter("id", PreconditionFilter.ParamType.Request, "^[1-9][0-9]*$", typeof(ArgumentOutOfRangeException))]
            </code>
            </example>
        </member>
        <member name="M:MvcContrib.Filters.RegExPreconditionFilter.#ctor(System.String,MvcContrib.Filters.PreconditionFilter.ParamType,System.String,System.Type)">
            <summary>
            Attribute constructor
            </summary>
            <param name="paramName">Name of key to validate</param>
            <param name="paramType">Type of key to validate</param>
            <param name="regExPattern">Regular expression to be matched</param>
            <param name="exceptionToThrow">Exception to throw on failed validation</param>
        </member>
        <member name="M:MvcContrib.Filters.RegExPreconditionFilter.FailedValidation(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Signals failure if RouteData key does not exist, RouteData key value is null or empty string,
            or regular expression does not match RouteData key value
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.Grid`1">
            <summary>
            Defines a grid to be rendered.
            </summary>
            <typeparam name="T">Type of datasource for the grid</typeparam>
        </member>
        <member name="M:MvcContrib.UI.Grid.Grid`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.IO.TextWriter,System.Web.Mvc.ViewContext)">
            <summary>
            Creates a new instance of the Grid class.
            </summary>
            <param name="dataSource">The datasource for the grid</param>
            <param name="writer">The TextWriter where the grid should be rendered</param>
            <param name="context"></param>
        </member>
        <member name="M:MvcContrib.UI.Grid.Grid`1.ToString">
            <summary>
            Renders to the TextWriter, and returns null. 
            This is by design so that it can be used with inline syntax in views.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcContrib.UI.Grid.Grid`1.Model">
            <summary>
            The GridModel that holds the internal representation of this grid.
            </summary>
        </member>
        <member name="P:MvcContrib.UI.Grid.Grid`1.DataSource">
            <summary>
            The datasource for the grid.
            </summary>
        </member>
        <member name="T:MvcContrib.UI.Grid.ActionSyntax.ActionSyntaxExtensions">
            <summary>
            Extension methods for the Grid that enable the alternative 'Action' syntax for rendering custom sections.
            </summary>
        </member>
        <member name="M:MvcContrib.UI.Grid.ActionSyntax.ActionSyntaxExtensions.RowStart``1(MvcContrib.UI.Grid.Syntax.IGridWithOptions{``0},System.Action{``0})">
            <summary>
            Executes a delegate that can be used to specify custom HTML to replace the built in rendering of the start of the row.
            </summary>
            <param name="grid">The grid</param>
            <param name="block">Action that renders the HTML.</param>
        </member>
        <member name="M:MvcContrib.UI.Grid.ActionSyntax.ActionSyntaxExtensions.RowStart``1(MvcContrib.UI.Grid.Syntax.IGridWithOptions{``0},System.Action{``0,MvcContrib.UI.Grid.GridRowViewData{``0}})">
            <summary>
            Executes a delegate that can be used to specify custom HTML to replace the built in rendering of the start of the row.
            </summary>
            <param name="grid">The grid</param>
            <param name="block">Action that renders the HTML.</param>
        </member>
        <member name="M:MvcContrib.UI.Grid.ActionSyntax.ActionSyntaxExtensions.RowEnd``1(MvcContrib.UI.Grid.Syntax.IGridWithOptions{``0},System.Action{``0})">
            <summary>
            Executes a delegate that can be used to specify custom HTML to replace the built in rendering of the end of the row.
            </summary>
            <param name="grid">The grid</param>
            <param name="block">Action that renders the HTML.</param>
        </member>
        <member name="M:MvcContrib.UI.Grid.ActionSyntax.ActionSyntaxExtensions.HeaderAction``1(MvcContrib.UI.Grid.IGridColumn{``0},System.Action)">
            <summary>
            Specifies that an action should be used to render the column header.
            </summary>
            <param name="column">The current column</param>
            <param name="action">The action to render</param>
            <returns></returns>
        </member>
        <member name="M:MvcContrib.UI.Grid.ActionSyntax.ActionSyntaxExtensions.Action``1(MvcContrib.UI.Grid.IGridColumn{``0},System.Action{``0})">
            <summary>
            Specifies that an action should be used to render the contents of this column.
            </summary>
            <param name="column">The current column</param>
            <param name="action">The action to render</param>
            <returns></returns>
        </member>
        <member name="T:MvcContrib.NameValueDeserializer">
            <summary>
            Provides the ability to deserialize a Request into a CLR object.
            </summary>
        </member>
        <member name="M:MvcContrib.NameValueDeserializer.Deserialize``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Deserializes the specified request collection.
            </summary>
            <typeparam name="T">The type to deserialize to.</typeparam>
            <param name="collection">The collection.</param>
            <param name="prefix">The prefix.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:MvcContrib.NameValueDeserializer.Deserialize``1(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Deserializes the specified request collection.
            </summary>
            <typeparam name="T">The type to deserialize to.</typeparam>
            <param name="collection">The collection.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:MvcContrib.NameValueDeserializer.Deserialize(System.Collections.Specialized.NameValueCollection,System.Type)">
            <summary>
            Deserializes the specified request collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="targetType">Type of the target.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:MvcContrib.NameValueDeserializer.Deserialize(System.Collections.Specialized.NameValueCollection,System.String,System.Type)">
            <summary>
            Deserializes the specified request collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="prefix">The prefix.</param>
            <param name="targetType">Type of the target.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:MvcContrib.Filters.RescueAttribute">
            <summary>
            Filter attribute for handling errors.
            When an error occurs, the RescueAttribute will first search for a view that matches the exception name,
            then render the specified view if no matching exception view is found.
            The rescue attribute can be limited to certain exception types.
            <example>
            <![CDATA[
            [Rescue("MyErrorView", typeof(InvalidOperationException)]
            [Rescue("DatabaseError", typeof(SqlException)]
            public class HomeController  {
            
                public ActionResult Action()
                {
                   throw new SqlException();
                  //will look for SqlException.aspx, then DatabaseError.aspx
                
                   throw new InvalidOperationException();
                  //will look for InvalidOperationException.aspx then MyErrorView.aspx 
                }
            
            }
            
            [Rescue("DefaultRescue")] 
            public ActionResult ControllerAction  {
                throw new CookieException();
            
                //this will look for CookieException.aspx
                //then call DefaultRescue.aspx if not found
            }
            ]]>
            
            
            </example>
            </summary>
        </member>
        <member name="M:MvcContrib.Filters.RescueAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the RescueAttribute class.
            </summary>
            <param name="view">The name of the view to render when an exception is thrown if no matching view is found.</param>
        </member>
        <member name="M:MvcContrib.Filters.RescueAttribute.#ctor(System.String,System.Type[])">
            <summary>
            Creates a new instance of the RescueAttribute class.
            </summary>
            <param name="view">The name of the view to render when an exception is thrown if no matching view is found.</param>
            <param name="exceptionTypes">The types of exception that this attribute will be restricted in catching.</param>
        </member>
        <member name="M:MvcContrib.Filters.RescueAttribute.OnException(System.Web.Mvc.ExceptionContext)">
            <summary>
            After the action has been executed, the Rescue will be invoked if the filterContext has an Exception.
            </summary>
            <param name="filterContext">The current filter context.</param>
        </member>
        <member name="M:MvcContrib.Filters.RescueAttribute.ViewExists(System.Type,System.Web.Mvc.ControllerContext)">
            <summary>
            Determines if the view exists. Override in an inherited class to implement a custom view finding scheme. 
            </summary>
            <param name="exceptionType">The type of exception that was thrown.</param>
            <param name="controllerContext">The current controllercontext.</param> 
            <returns>True if the view is found, otherwise false.</returns>
        </member>
        <member name="M:MvcContrib.Filters.RescueAttribute.CreateViewContext(System.Exception,System.Web.Mvc.ControllerContext)">
            <summary>
            Creates the ViewContext to be used when rendering the rescue.
            </summary>
            <param name="exception">The exception which will become the ViewData.</param>
            <param name="controllerContext">The current controllercpontext.</param>
            <returns>A ViewContext object.</returns>
        </member>
        <member name="P:MvcContrib.Filters.RescueAttribute.ViewName">
            <summary>
            The view to render.
            </summary>
        </member>
        <member name="P:MvcContrib.Filters.RescueAttribute.ExceptionsTypes">
            <summary>
            The exception types used by this rescue.
            </summary>
        </member>
        <member name="P:MvcContrib.Filters.RescueAttribute.AutoLocate">
            <summary>
            When false, only the specified rescue will be called.
            When true, rescues with a name matching the exception will be called.
            </summary>
        </member>
        <member name="P:MvcContrib.Filters.RescueAttribute.IgnoreAjax">
            <summary>
            When true, ajax calls are not rescued (default).
            When false, rescue will handle ajax calls.
            </summary>
        </member>
        <member name="P:MvcContrib.Filters.RescueAttribute.IgnoreTypes">
            <summary>
            Collection of exception types to be explicitly ignored.
            </summary>
        </member>
    </members>
</doc>
