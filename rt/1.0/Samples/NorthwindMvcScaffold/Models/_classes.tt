<#@ template language="C#v3.5" debug="False" hostspecific="True"  #>
<#@ output extension=".cs" #>
<#@ include file="SQLServer.ttinclude" #>
<#
    var tables = LoadTables();
#>
using BoC.Persistence;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
namespace <#=Namespace#>
{   
<#  foreach(Table tbl in tables){#>    
    /// <summary>
    /// A class which represents the <#=tbl.Name#> table in the <#=DatabaseName#> Database.
    /// </summary>
	public partial class <#=tbl.ClassName#>: BaseEntity<<#= tbl.PK.FirstOrDefault().SysType #>>
	{
<#      foreach(var col in tbl.Columns){ 
			if (!col.IsPK || tbl.PK.Count() > 1) { 
				if (!col.IsNullable) { #>
		[Required] //isPK: <#= col.IsPK.ToString() #>
<#				} if (!col.IsForeignKey)  {#>
		virtual public <#=col.SysType#><#=CheckNullable(col)#> <#=col.CleanName#> { get; set; }
<#      		} else {
					var fk = tbl.FKTables.FirstOrDefault(
                		x=>x.ThisColumn.Equals(col.Name,StringComparison.InvariantCultureIgnoreCase));
					var name = col.CleanName;
					if (name == fk.OtherColumn)
						name = fk.OtherClass;

 				if (!String.IsNullOrEmpty(fk.ConstraintName)) {#>
		[Association("<#= fk.ConstraintName #>", "Id", "<#= tables.Where(t => t.Name == fk.OtherTable).FirstOrDefault().PK.FirstOrDefault().CleanName == fk.OtherColumn ? "Id" : fk.OtherColumn #>", IsForeignKey = true)]
<# 				} #>
		virtual public <#=fk.OtherClass #> <#= name #> {get; set;}
<#
				}
			}
			
		}#>

<#
        List<string> fkCreated = new List<string>();
        foreach(FKTable fk in tbl.FKTables)
        { 
            
            if(!ExcludeTables.Contains(fk.OtherTable)){
                string propName=fk.OtherQueryable;
                if(fkCreated.Contains(propName))
                {
                    propName=fk.OtherQueryable+fkCreated.Count.ToString();
                }
                
                fkCreated.Add(fk.OtherQueryable);
				
                if (!fk.IsOneToMany) //many-to-1
				{
#>
        ICollection<<#=fk.OtherClass #>> _<#=propName #> = new HashSet<<#=fk.OtherClass #>>();
<# 				if (!String.IsNullOrEmpty(fk.ConstraintName)) {#>
		[Association("<#= fk.ConstraintName #>", "Id", "Id",IsForeignKey = true)]
<# 				} #>
        virtual public ICollection<<#=fk.OtherClass #>> <#=propName #>
        {
            get
            {
				return _<#=propName#>;
            }
			protected set
			{
				_<#=propName#> = value;
			}
        }

<#
				}
            }
        }
            
#>

	}
	
<#}#>
}